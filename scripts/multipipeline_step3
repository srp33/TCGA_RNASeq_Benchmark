#!/bin/bash

set -o errexit

sampleID=$1
analysisID=$2
fastqDir=$3

currentDir=$(pwd)
outFastqDir=$currentDir/FASTQ/$sampleID

if [ ! -d $fastqDir ]
then
  echo $fastqDir does not exist. It may have been a partial download or may have already been processed.
  exit 0
fi

if [ -f EduardoEyras/Kallisto/GENCODE/$sampleID/abundance.tsv ]
then
  echo $sampleID already processed to the end
  exit 0
fi

numFastqFiles=$(python code/PrintNumMatchingFiles.py "$outFastqDir/*fastq*")

if [ "$numFastqFiles" -gt "0" ]
then
  echo FASTQ files have already been extracted to $outFastqDir.
  exit 0
fi

function cleanup {
  rm -rfv $fastqDir
  rm -rfv $fastqDir.gto
}

trap 'cleanup' TERM INT EXIT

mkdir -p $outFastqDir

if [ -f $fastqDir/*.tar.gz ]
then
  echo Rename and extract $fastqDir/*.tar.gz
  tar -zxvf $fastqDir/*.tar.gz -C $outFastqDir
else
  if [ ! -f $fastqDir/*.tar ]
  then
    echo No files exist to be extracted in $fastqDir.
    exit 0
  fi

  echo Rename and extract $fastqDir/*.tar
  tar -xvf $fastqDir/*.tar -C $outFastqDir
fi

numFastqFiles=$(python code/PrintNumMatchingFiles.py "$outFastqDir/*fastq*")

if [ "$numFastqFiles" == "0" ]
then
  echo "No FASTQ files were found at $outFastqDir."
  exit 0
fi

#if [ "$numFastqFiles" == "1" ]
#then
#  fastqFilePath1=$outFastqDir/*fastq*
#  fastqFilePath2=
#fi

pairedEnd=$(python code/FileNamesContainText.py "_1.fastq" "$outFastqDir/*fastq*")

#if [ "$pairedEnd" == "True" ]
#then
#  fastqFilePath1=$(python code/JoinFileNames.py "$outFastqDir/*_1.fastq*" ",")
#  fastqFilePath2=$(python code/JoinFileNames.py "$outFastqDir/*_2.fastq*" ",")
#else
#  fastqFilePath1=$(python code/JoinFileNames.py "$outFastqDir/*fastq*" ",")
#  fastqFilePath2=
#fi

echo "./scripts/multipipeline_step4 $outFastqDir $pairedEnd" >> CommandsToExecute/multipipeline_step4
